plugins {
	id 'java'
	id 'checkstyle'
	id 'groovy'
	id 'jacoco'
	id 'maven-publish'
	id 'org.sonarqube' version '3.4.0.2513'
}

group 'com.example'
version '1.1-SNAPSHOT'

java {
	withSourcesJar()
}

repositories {
	mavenCentral()
	maven {
		url = uri("http://localhost:8081/repository/maven-private")
		credentials {
			username = nexusUsername
			password = nexusPassword
		}
		allowInsecureProtocol = true
	}
}

dependencies {
	implementation 'org.apache.commons:commons-lang3:3.12.0'

	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'

	compileOnly 'org.mapstruct:mapstruct:1.5.3.Final'
	testImplementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

	testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
	testImplementation 'org.codehaus.groovy:groovy-all:3.0.13'
	testImplementation 'net.bytebuddy:byte-buddy:1.12.18'
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	dependsOn(test)
	getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
	reports {
		xml.enabled true
	}
}

checkstyleMain {
	source = fileTree('.') {
		excludes = ['.*/**', 'gradle*', 'build/**', '*.iml', '*.log', '**/*.jar', 'data/**']
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			if (project.version.endsWith('-SNAPSHOT')) {
				url = "http://localhost:8081/repository/maven-snapshots"
			} else {
				url = "http://localhost:8081/repository/maven-releases"
			}
			credentials {
				username = nexusUsername
				password = nexusPassword
			}
			allowInsecureProtocol = true
		}
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "pis22z_model_AYRoGmCNjSfUiXMQwm2Y"
	}
}
